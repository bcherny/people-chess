// Generated by CoffeeScript 1.7.1
var Bishop, CONTAINER, HEIGHT, King, Knight, Pawn, Piece, Queen, Rook, WIDTH, a, b, c, d, e, f, g, generate_board, generate_row, generate_square, h, pieces,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

HEIGHT = 8;

WIDTH = 8;

CONTAINER = document.body.querySelector('.board');

Piece = (function() {
  function Piece(x, y, color) {
    this.x = x;
    this.y = y;
    this.color = color;
    this.element = document.createElement('div');
    this.element.classList.add('piece', this.color, this.name);
    this.element;
  }

  Piece.prototype.validate = function() {
    return true;
  };

  Piece.prototype.move = function(x, y) {
    var _ref;
    if (this.validate(x, y)) {
      return _ref = [x, y], this.x = _ref[0], this.y = _ref[1], _ref;
    }
  };

  return Piece;

})();

King = (function(_super) {
  __extends(King, _super);

  function King() {
    return King.__super__.constructor.apply(this, arguments);
  }

  King.prototype.name = 'king';

  King.prototype.validate = function() {};

  return King;

})(Piece);

Queen = (function(_super) {
  __extends(Queen, _super);

  function Queen() {
    return Queen.__super__.constructor.apply(this, arguments);
  }

  Queen.prototype.name = 'queen';

  Queen.prototype.validate = function() {};

  return Queen;

})(Piece);

Bishop = (function(_super) {
  __extends(Bishop, _super);

  function Bishop() {
    return Bishop.__super__.constructor.apply(this, arguments);
  }

  Bishop.prototype.name = 'bishop';

  Bishop.prototype.validate = function() {};

  return Bishop;

})(Piece);

Knight = (function(_super) {
  __extends(Knight, _super);

  function Knight() {
    return Knight.__super__.constructor.apply(this, arguments);
  }

  Knight.prototype.name = 'knight';

  Knight.prototype.validate = function() {};

  return Knight;

})(Piece);

Rook = (function(_super) {
  __extends(Rook, _super);

  function Rook() {
    return Rook.__super__.constructor.apply(this, arguments);
  }

  Rook.prototype.name = 'rook';

  Rook.prototype.validate = function() {};

  return Rook;

})(Piece);

Pawn = (function(_super) {
  __extends(Pawn, _super);

  function Pawn() {
    return Pawn.__super__.constructor.apply(this, arguments);
  }

  Pawn.prototype.name = 'pawn';

  Pawn.prototype.validate = function() {};

  return Pawn;

})(Piece);


/*

	init
 */

a = 1;

b = 2;

c = 3;

d = 4;

e = 5;

f = 6;

g = 7;

h = 8;

pieces = [new Rook(a, 8, 'black'), new Knight(b, 8, 'black'), new Bishop(c, 8, 'black'), new Queen(d, 8, 'black'), new King(e, 8, 'black'), new Bishop(f, 8, 'black'), new Knight(g, 8, 'black'), new Rook(h, 8, 'black'), new Pawn(a, 7, 'black'), new Pawn(b, 7, 'black'), new Pawn(c, 7, 'black'), new Pawn(d, 7, 'black'), new Pawn(e, 7, 'black'), new Pawn(f, 7, 'black'), new Pawn(g, 7, 'black'), new Pawn(h, 7, 'black'), new Rook(a, 1, 'white'), new Knight(b, 1, 'white'), new Bishop(c, 1, 'white'), new Queen(d, 1, 'white'), new King(e, 1, 'white'), new Bishop(f, 1, 'white'), new Knight(g, 1, 'white'), new Rook(h, 1, 'white'), new Pawn(a, 2, 'white'), new Pawn(b, 2, 'white'), new Pawn(c, 2, 'white'), new Pawn(d, 2, 'white'), new Pawn(e, 2, 'white'), new Pawn(f, 2, 'white'), new Pawn(g, 2, 'white'), new Pawn(h, 2, 'white')];

generate_board = function(container, width, height) {
  var _i, _results;
  return (function() {
    _results = [];
    for (var _i = 1; 1 <= height ? _i <= height : _i >= height; 1 <= height ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this).forEach(function(y) {
    var row, _i, _results;
    row = generate_row(y);
    (function() {
      _results = [];
      for (var _i = 1; 1 <= width ? _i <= width : _i >= width; 1 <= width ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function(x) {
      var square;
      square = generate_square(x, y);
      return row.appendChild(square);
    });
    return container.appendChild(row);
  });
};

generate_square = function(x, y) {
  var square;
  square = document.createElement('div');
  square.classList.add('square');
  if ((x % 2 === 1 && y % 2 === 1) || (x % 2 !== 1 && y % 2 !== 1)) {
    square.classList.add('odd');
  } else {
    square.classList.add('even');
  }
  return square;
};

generate_row = function(y) {
  var row;
  row = document.createElement('div');
  row.classList.add('row', 'row-' + y);
  return row;
};

generate_board(CONTAINER, WIDTH, HEIGHT);

pieces.forEach(function(piece) {
  var row, rows, square, squares;
  rows = CONTAINER.querySelectorAll('.row');
  row = rows[piece.y - 1];
  squares = row.querySelectorAll('.square');
  square = squares[piece.x - 1];
  return square.appendChild(piece.element);
});

//# sourceMappingURL=chess.map
